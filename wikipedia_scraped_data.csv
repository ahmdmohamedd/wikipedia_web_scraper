Headings,Paragraphs,Bullet Points
History,,"Tier 1: 64-bit Linux, macOS; 64- and 32-bit Windows 10+[5]"
Design philosophy and features,"Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[32]",Tier 2: E.g. 32-bit WebAssembly (WASI)
Syntax and semantics,"Python is dynamically type-checked and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a ""batteries included"" language due to its comprehensive standard library.[33][34]","Tier 3: 64-bit Android,[6] iOS, FreeBSD, and (32-bit) Raspberry Pi OSUnofficial (or has been known to work): Other Unix-like/BSD variants) and a few other platforms[7][8][9]"
Indentation,"Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[35] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[36]",Python Programming at Wikibooks
Statements and control flow,"Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[37][38][39][40]",Beautiful is better than ugly.
Expressions,"Python was conceived in the late 1980s[41] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[42] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[43] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his ""permanent vacation"" from his responsibilities as Python's ""benevolent dictator for life"" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[44] (he has since come out of retirement and is self-titled ""BDFL-emeritus""). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[45][46]",Explicit is better than implicit.
Methods,"Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[47] Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[48][49] No further security patches or other improvements will be released for it.[50][51] While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. ""2.7.18+"" (plus 3.10), with the plus meaning (at least some) ""backported security updates"".[52]",Simple is better than complex.
Typing,"Python 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (now unsupported) 3.5 has added some syntax to the language, and a few later releases have dropped outdated modules, or changed semantics, at least in a minor way.",Complex is better than complicated.
Arithmetic operations,"Since 7 October 2024[update], Python 3.13 is the latest stable release, and it and, for few more months, 3.12 are the only releases with active support including for bugfixes (as opposed to just for security) and Python 3.9,[53] is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.8 reaching end-of-life.[54][55] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half), followed by 3 years of security support (for same total support as before).",Readability counts.
Programming examples,"Security updates were expedited in 2021 (and again twice in 2022, and more fixed in 2023 and in September 2024 for Python 3.12.6 down to 3.8.20), since all Python versions were insecure (including 2.7[56]) because of security issues leading to possible remote code execution[57] and web-cache poisoning.[58]","The assignment statement, using a single equals sign ="
Libraries,"Python 3.10 added the | union type operator[59] and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[60] Python 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages (again improved in 3.14), and many other changes.","The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if)"
Development environments,"Python 3.13 introduces more syntax for types, a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects, and addition to the improved speed in 3.11 and 3.12),  and an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed),[61] and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, that latter feature enabled with python3.13t or python3.13t.exe.","The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block"
Implementations,"Python 3.13 introduces some change in behavior, i.e. new ""well-defined semantics"", fixing bugs (plus many removals of deprecated classes, functions and methods, and removed some of the C API and outdated modules): ""The  [old] implementation of locals() and frame.f_locals is slow, inconsistent and buggy [and it has] has many corner cases and oddities. Code that works around those may need to be changed. Code that uses locals() for simple templating, or print debugging, will continue to work correctly.""[62]","The while statement, which executes a block of code as long as its condition is true"
Reference implementation,"Some (more) standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 or 3.16.[63][64]","The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups[95]); it also ensures that clean-up code in a finally block is always run regardless of how the block exits"
Other implementations,"Python 3.14 is now in alpha 2;[65] regarding possible change to annotations: ""In Python 3.14, from __future__ import annotations will continue to work as it did before, converting annotations into strings.""  [66]","The raise statement, used to raise a specified exception or re-raise a caught exception"
No longer supported implementations,PEP 711 proposes PyBI: a standard format for distributing Python Binaries.[67],"The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming"
Cross-compilers to other languages,"Python 3.15 will ""Make UTF-8 mode default"",[68] the mode exists in all current Python versions, but currently needs to be opted into. UTF-8 is already used, by default, on Windows (and elsewhere), for most things, but e.g. to open files it's not and enabling also makes code fully cross-platform, i.e. use UTF-8 for everything on all platforms.","The def statement, which defines a function or method"
Performance,"Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[69] and metaobjects).[70] Many other paradigms are supported via extensions, including design by contract[71][72] and logic programming.[73] Python is known as a glue language,[74] able to work very well with many other languages with ease of access.","The with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom[96]"
Development,"Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[75] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.","The break statement, which exits a loop"
API documentation generators,"Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[76] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[77]","The continue statement, which skips the rest of the current iteration and continues with the next"
Naming,"Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[78]","The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined"
Popularity,"However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat.[79] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[80] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[81][82]","The pass statement, serving as a NOP, syntactically needed to create an empty code block"
Uses,"Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[41]","The assert statement, used in debugging to check for conditions that should apply"
Languages influenced by Python,"Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's ""there is more than one way to do it"" motto, Python embraces a ""there should be one—and preferably only one—obvious way to do it."" philosophy.[78] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[83] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: ""To describe something as 'clever' is not considered a compliment in the Python culture.""[84]","The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines"
See also,"Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[85] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[86]","The return statement, used to return a value from a function"
References,"Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[87]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms ""spam"" and ""eggs"" (a reference to a Monty Python sketch) in examples, instead of the often-used ""foo"" and ""bar"".[88][89] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. ""Pythonic"" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[90]","The import and from statements, used to import modules whose functions or variables can be used in the current program"
Sources,"Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[91]","The match and case statements, an analog of the switch statement construct, that compares an expression against one or more cases as a control-of-flow measure."
Further reading,"Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[92] Thus, the program's visual structure accurately represents its semantic structure.[93] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[94]","The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point/division.[101] Python uses the ** operator for exponentiation."
External links,Python's statements include:,Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.
